/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CourseService } from "../course.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CourseCreateInput } from "./CourseCreateInput";
import { Course } from "./Course";
import { CourseFindManyArgs } from "./CourseFindManyArgs";
import { CourseWhereUniqueInput } from "./CourseWhereUniqueInput";
import { CourseUpdateInput } from "./CourseUpdateInput";
import { ClassModelFindManyArgs } from "../../classModel/base/ClassModelFindManyArgs";
import { ClassModel } from "../../classModel/base/ClassModel";
import { ClassModelWhereUniqueInput } from "../../classModel/base/ClassModelWhereUniqueInput";
import { EnrollmentFindManyArgs } from "../../enrollment/base/EnrollmentFindManyArgs";
import { Enrollment } from "../../enrollment/base/Enrollment";
import { EnrollmentWhereUniqueInput } from "../../enrollment/base/EnrollmentWhereUniqueInput";
import { AttendanceFindManyArgs } from "../../attendance/base/AttendanceFindManyArgs";
import { Attendance } from "../../attendance/base/Attendance";
import { AttendanceWhereUniqueInput } from "../../attendance/base/AttendanceWhereUniqueInput";
import { RegisterFindManyArgs } from "../../register/base/RegisterFindManyArgs";
import { Register } from "../../register/base/Register";
import { RegisterWhereUniqueInput } from "../../register/base/RegisterWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CourseControllerBase {
  constructor(
    protected readonly service: CourseService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Course })
  @nestAccessControl.UseRoles({
    resource: "Course",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createCourse(@common.Body() data: CourseCreateInput): Promise<Course> {
    return await this.service.createCourse({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        courseName: true,
        courseCode: true,
        description: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Course] })
  @ApiNestedQuery(CourseFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Course",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async courses(@common.Req() request: Request): Promise<Course[]> {
    const args = plainToClass(CourseFindManyArgs, request.query);
    return this.service.courses({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        courseName: true,
        courseCode: true,
        description: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Course })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Course",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async course(
    @common.Param() params: CourseWhereUniqueInput
  ): Promise<Course | null> {
    const result = await this.service.course({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        courseName: true,
        courseCode: true,
        description: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Course })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Course",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateCourse(
    @common.Param() params: CourseWhereUniqueInput,
    @common.Body() data: CourseUpdateInput
  ): Promise<Course | null> {
    try {
      return await this.service.updateCourse({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          courseName: true,
          courseCode: true,
          description: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Course })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Course",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCourse(
    @common.Param() params: CourseWhereUniqueInput
  ): Promise<Course | null> {
    try {
      return await this.service.deleteCourse({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          courseName: true,
          courseCode: true,
          description: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/classes")
  @ApiNestedQuery(ClassModelFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ClassModel",
    action: "read",
    possession: "any",
  })
  async findClasses(
    @common.Req() request: Request,
    @common.Param() params: CourseWhereUniqueInput
  ): Promise<ClassModel[]> {
    const query = plainToClass(ClassModelFindManyArgs, request.query);
    const results = await this.service.findClasses(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        classRoom: true,
        className: true,

        course: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/classes")
  @nestAccessControl.UseRoles({
    resource: "Course",
    action: "update",
    possession: "any",
  })
  async connectClasses(
    @common.Param() params: CourseWhereUniqueInput,
    @common.Body() body: ClassModelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      classes: {
        connect: body,
      },
    };
    await this.service.updateCourse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/classes")
  @nestAccessControl.UseRoles({
    resource: "Course",
    action: "update",
    possession: "any",
  })
  async updateClasses(
    @common.Param() params: CourseWhereUniqueInput,
    @common.Body() body: ClassModelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      classes: {
        set: body,
      },
    };
    await this.service.updateCourse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/classes")
  @nestAccessControl.UseRoles({
    resource: "Course",
    action: "update",
    possession: "any",
  })
  async disconnectClasses(
    @common.Param() params: CourseWhereUniqueInput,
    @common.Body() body: ClassModelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      classes: {
        disconnect: body,
      },
    };
    await this.service.updateCourse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/enrollments")
  @ApiNestedQuery(EnrollmentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Enrollment",
    action: "read",
    possession: "any",
  })
  async findEnrollments(
    @common.Req() request: Request,
    @common.Param() params: CourseWhereUniqueInput
  ): Promise<Enrollment[]> {
    const query = plainToClass(EnrollmentFindManyArgs, request.query);
    const results = await this.service.findEnrollments(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        enrollDate: true,

        course: {
          select: {
            id: true,
          },
        },

        student: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/enrollments")
  @nestAccessControl.UseRoles({
    resource: "Course",
    action: "update",
    possession: "any",
  })
  async connectEnrollments(
    @common.Param() params: CourseWhereUniqueInput,
    @common.Body() body: EnrollmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      enrollments: {
        connect: body,
      },
    };
    await this.service.updateCourse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/enrollments")
  @nestAccessControl.UseRoles({
    resource: "Course",
    action: "update",
    possession: "any",
  })
  async updateEnrollments(
    @common.Param() params: CourseWhereUniqueInput,
    @common.Body() body: EnrollmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      enrollments: {
        set: body,
      },
    };
    await this.service.updateCourse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/enrollments")
  @nestAccessControl.UseRoles({
    resource: "Course",
    action: "update",
    possession: "any",
  })
  async disconnectEnrollments(
    @common.Param() params: CourseWhereUniqueInput,
    @common.Body() body: EnrollmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      enrollments: {
        disconnect: body,
      },
    };
    await this.service.updateCourse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/attendances")
  @ApiNestedQuery(AttendanceFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Attendance",
    action: "read",
    possession: "any",
  })
  async findAttendances(
    @common.Req() request: Request,
    @common.Param() params: CourseWhereUniqueInput
  ): Promise<Attendance[]> {
    const query = plainToClass(AttendanceFindManyArgs, request.query);
    const results = await this.service.findAttendances(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        attendanceDate: true,
        status: true,

        student: {
          select: {
            id: true,
          },
        },

        course: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/attendances")
  @nestAccessControl.UseRoles({
    resource: "Course",
    action: "update",
    possession: "any",
  })
  async connectAttendances(
    @common.Param() params: CourseWhereUniqueInput,
    @common.Body() body: AttendanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attendances: {
        connect: body,
      },
    };
    await this.service.updateCourse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/attendances")
  @nestAccessControl.UseRoles({
    resource: "Course",
    action: "update",
    possession: "any",
  })
  async updateAttendances(
    @common.Param() params: CourseWhereUniqueInput,
    @common.Body() body: AttendanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attendances: {
        set: body,
      },
    };
    await this.service.updateCourse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/attendances")
  @nestAccessControl.UseRoles({
    resource: "Course",
    action: "update",
    possession: "any",
  })
  async disconnectAttendances(
    @common.Param() params: CourseWhereUniqueInput,
    @common.Body() body: AttendanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attendances: {
        disconnect: body,
      },
    };
    await this.service.updateCourse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/registers")
  @ApiNestedQuery(RegisterFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Register",
    action: "read",
    possession: "any",
  })
  async findRegisters(
    @common.Req() request: Request,
    @common.Param() params: CourseWhereUniqueInput
  ): Promise<Register[]> {
    const query = plainToClass(RegisterFindManyArgs, request.query);
    const results = await this.service.findRegisters(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        registerDate: true,
        status: true,

        student: {
          select: {
            id: true,
          },
        },

        course: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/registers")
  @nestAccessControl.UseRoles({
    resource: "Course",
    action: "update",
    possession: "any",
  })
  async connectRegisters(
    @common.Param() params: CourseWhereUniqueInput,
    @common.Body() body: RegisterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      registers: {
        connect: body,
      },
    };
    await this.service.updateCourse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/registers")
  @nestAccessControl.UseRoles({
    resource: "Course",
    action: "update",
    possession: "any",
  })
  async updateRegisters(
    @common.Param() params: CourseWhereUniqueInput,
    @common.Body() body: RegisterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      registers: {
        set: body,
      },
    };
    await this.service.updateCourse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/registers")
  @nestAccessControl.UseRoles({
    resource: "Course",
    action: "update",
    possession: "any",
  })
  async disconnectRegisters(
    @common.Param() params: CourseWhereUniqueInput,
    @common.Body() body: RegisterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      registers: {
        disconnect: body,
      },
    };
    await this.service.updateCourse({
      where: params,
      data,
      select: { id: true },
    });
  }
}
